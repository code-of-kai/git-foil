#!/bin/bash
# Git Foil Development Installation Script
#
# This script installs your local development version of git-foil so that
# when you run `git-foil`, it executes your latest code changes via `mix run`.
#
# Usage: ./scripts/mix-run.sh
#
# What it does:
# 1. Compiles your latest code changes
# 2. Creates/updates a wrapper script at /usr/local/bin/git-foil
# 3. The wrapper runs: cd <dev-directory> && mix run -e "GitFoil.CLI.main(...)"
# 4. Now typing `git-foil` anywhere runs your development code!

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
error() {
    echo -e "${RED}❌ Error: $1${NC}" >&2
    exit 1
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

warn() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Get the absolute path to the git-foil repository root
REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Create wrapper in repository's bin directory
# This ensures it's always accessible and doesn't conflict with system paths
BIN_DIR="${REPO_ROOT}/bin"
mkdir -p "${BIN_DIR}"
WRAPPER_PATH="${BIN_DIR}/git-foil"

info "Installing development version of git-foil"
echo ""

# Step 1: Verify we're in the git-foil repository
info "Step 1: Verifying repository..."
if [ ! -f "${REPO_ROOT}/mix.exs" ]; then
    error "Not in git-foil repository root (mix.exs not found)"
fi
success "Repository verified: ${REPO_ROOT}"
echo ""

# Step 2: Compile the latest code
info "Step 2: Compiling latest code changes..."
cd "${REPO_ROOT}"
if mix compile 2>&1 | grep -q "error"; then
    error "Compilation failed. Fix errors and try again."
fi
success "Code compiled successfully"
echo ""

# Step 3: Check PATH configuration
info "Step 3: Checking PATH configuration..."
HOMEBREW_PATH=$(which git-foil 2>/dev/null || echo "")
if [ -n "$HOMEBREW_PATH" ]; then
    info "Found existing git-foil at: ${HOMEBREW_PATH}"
fi

# Check if bin directory is in PATH
if [[ ":$PATH:" != *":${BIN_DIR}:"* ]]; then
    warn "Note: ${BIN_DIR} is not in your PATH"
    warn "You'll need to use the full path: ${WRAPPER_PATH}"
    warn ""
    warn "To use 'git-foil' command directly, add this to your ~/.zshrc or ~/.bashrc:"
    warn "    export PATH=\"${BIN_DIR}:\$PATH\""
fi
echo ""

# Step 4: Create wrapper script
info "Step 4: Creating wrapper script at ${WRAPPER_PATH}..."

# Create the wrapper script content
cat > /tmp/git-foil-wrapper << 'EOF'
#!/bin/bash
# Git Foil Development Wrapper
# Auto-generated by scripts/mix-run.sh
# This runs your local development version of git-foil

# Save current directory
INVOKE_DIR="$(pwd)"
export INVOKE_DIR

# Change to repo directory to run mix, then change back before Elixir runs
(cd "REPO_ROOT_PLACEHOLDER" && MIX_ENV=prod mix run -e "File.cd!(System.get_env(\"INVOKE_DIR\")); GitFoil.CLI.main(System.argv())" -- "$@")
EOF

# Replace placeholder with actual repo root
sed -i.bak "s|REPO_ROOT_PLACEHOLDER|${REPO_ROOT}|g" /tmp/git-foil-wrapper
rm -f /tmp/git-foil-wrapper.bak

# Install the wrapper
mv /tmp/git-foil-wrapper "${WRAPPER_PATH}"
chmod +x "${WRAPPER_PATH}"

success "Wrapper script created"
echo ""

# Step 5: Verify installation
info "Step 5: Verifying installation..."
if [ ! -x "${WRAPPER_PATH}" ]; then
    error "Wrapper script not executable at ${WRAPPER_PATH}"
fi

VERSION_OUTPUT=$(${WRAPPER_PATH} --version 2>&1 || echo "failed")
if [[ "$VERSION_OUTPUT" == *"GitFoil version"* ]]; then
    success "Installation verified: ${VERSION_OUTPUT}"
else
    error "Installation verification failed. Output: ${VERSION_OUTPUT}"
fi
echo ""

# Summary
echo ""
echo "═══════════════════════════════════════════════════════════════"
success "Development installation complete!"
echo "═══════════════════════════════════════════════════════════════"
echo ""
info "Development version installed!"
echo ""
echo "📍 Use this command from ANY directory to run your development version:"
echo ""
echo "    ${WRAPPER_PATH}"
echo ""
info "Quick Test:"
echo "  cd /tmp && mkdir test_dir && cd test_dir"
echo "  git init"
echo "  ${WRAPPER_PATH} init"
echo ""
info "Development Workflow:"
echo "  1. Make code changes in your editor"
echo "  2. Run: ./scripts/mix-run.sh (recompiles)"
echo "  3. Test from anywhere: ${WRAPPER_PATH} <command>"
echo "  4. Repeat!"
echo ""
